// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name GoSignSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import Foundation
@_exported import GoSignSDK
import KeychainSwift
import LocalAuthentication
import Moya
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
extension Swift.Result where Success == () {
  public static var success: Swift.Result<(), Failure> {
    get
  }
}
@objc public class ServerResponseError : ObjectiveC.NSObject, Swift.Error, Swift.Codable {
  @objc final public let error: Swift.String?
  @objc final public let errorDescription: Swift.String?
  @objc final public let code: Swift.String?
  @objc final public let codeDesc: Swift.String?
  @objc public init(error: Swift.String?, errorDescription: Swift.String?, code: Swift.String?, codeDesc: Swift.String?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class Router {
  public static func request<T, U>(targetType: T, completion: @escaping (Swift.Result<U, any Swift.Error>) -> Swift.Void) where T : Moya.TargetType, U : Swift.Decodable
  public static func request<T>(targetType: T, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void) where T : Moya.TargetType
  @objc deinit
}
@objc public class VerifyQRCodeAPIRequest : ObjectiveC.NSObject, Swift.Encodable {
  @objc public var userID: Swift.String?, qrCode: Swift.String?
  @objc public init(userID: Swift.String? = nil, qrCode: Swift.String?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public class DeleteDeviceForNotificationAPIRequest : ObjectiveC.NSObject, Swift.Codable {
  @objc public var deviceToken: Swift.String
  @objc public init(deviceToken: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class UserAuthenticateAPIRequest : ObjectiveC.NSObject, Swift.Encodable {
  @objc public var userID: Swift.String?
  @objc public init(userID: Swift.String?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public class DeviceRegistrationSettings : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let deviceKeyType: Swift.String?
  @objc final public let deviceKeySize: Swift.Int
  @objc final public let secureElementRequired: Swift.Bool
  @objc final public let biometricRequired: Swift.Bool
  @objc final public let allowedDevices: Swift.String?, clockToleranceOnAuthCERT: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class DevicePushNotificationAPIRequest : ObjectiveC.NSObject, Swift.Encodable {
  @objc public var deviceToken: Swift.String
  @objc public var osType: Swift.String
  @objc public init(deviceToken: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public class GenerateQRCodeAPIRequest : ObjectiveC.NSObject, Swift.Encodable {
  @objc public var clientID: Swift.String
  @objc public var userID: Swift.String
  @objc public var format: GoSignSDK.QRFormat
  @objc public var size: Swift.String
  @objc public init(clientID: Swift.String, userID: Swift.String? = nil, format: GoSignSDK.QRFormat = .png, size: Swift.String = "256")
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public class GenerateQRCodeAPIResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let size: Swift.String?, qrCode: Swift.String?
  @objc final public let format: GoSignSDK.QRFormat
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum QRFormat : Swift.Int, Swift.Codable, Swift.RawRepresentable {
  case png, jpg, bmp, jpeg, wbmp, gif
  public typealias RawValue = Swift.String
  public var rawValue: GoSignSDK.QRFormat.RawValue {
    get
  }
  public init?(rawValue: GoSignSDK.QRFormat.RawValue)
}
public enum SubjectItem {
  case commonName(Swift.String), organizationName(Swift.String), organizationUnitName(Swift.String), countryName(Swift.String), stateOrProvinceName(Swift.String), serialNumber(Swift.String), localityName(Swift.String), description(Swift.String), emailAddress(Swift.String)
}
@objc @_inheritsConvenienceInitializers public class CertificateSigningRequest : ObjectiveC.NSObject {
  public init(keyAlgorithm: GoSignSDK.KeyAlgorithm)
  @objc convenience override dynamic public init()
  convenience public init(commonName: Swift.String? = nil, organizationName: Swift.String? = nil, organizationUnitName: Swift.String? = nil, countryName: Swift.String? = nil, stateOrProvinceName: Swift.String? = nil, localityName: Swift.String? = nil, serialNumber: Swift.String? = nil, emailAddress: Swift.String? = nil, description: Swift.String? = nil, keyAlgorithm: GoSignSDK.KeyAlgorithm)
  public func addSubjectItem(_ subjectItem: GoSignSDK.SubjectItem)
  public func build(_ publicKeyBits: Foundation.Data, privateKey: Security.SecKey, publicKey: Security.SecKey? = nil) -> Foundation.Data?
  public func buildAndEncodeDataAsString(_ publicKeyBits: Foundation.Data, privateKey: Security.SecKey, publicKey: Security.SecKey? = nil) -> Swift.String?
  public func buildCSRAndReturnString(_ publicKeyBits: Foundation.Data, privateKey: Security.SecKey, publicKey: Security.SecKey? = nil) -> Swift.String?
  @objc deinit
}
public enum KeyAlgorithm {
  case rsa(signatureType: GoSignSDK.KeyAlgorithm.Signature), ec(signatureType: GoSignSDK.KeyAlgorithm.Signature)
  @available(iOS 10, macCatalyst 13.0, macOS 10.12, tvOS 10.0, watchOS 3.0, *)
  public var secKeyAttrType: CoreFoundation.CFString {
    get
  }
  public var availableKeySizes: [Swift.Int] {
    get
  }
  public enum Signature {
    case sha1, sha256, sha512
    public static func == (a: GoSignSDK.KeyAlgorithm.Signature, b: GoSignSDK.KeyAlgorithm.Signature) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var type: Swift.String {
    get
  }
  @available(iOS 10, macCatalyst 13.0, macOS 10.12, tvOS 10.0, watchOS 3.0, *)
  public var signatureAlgorithm: Security.SecKeyAlgorithm {
    get
  }
}
extension GoSignSDK.API {
  @objc public static var accessToken: Swift.String {
    @objc get
  }
  @objc public static var userToken: Swift.String {
    @objc get
  }
  @objc public static var refreshToken: Swift.String {
    @objc get
  }
}
extension GoSignSDK.API {
  @objc public static var host: Swift.String
}
@objc @_inheritsConvenienceInitializers final public class API : ObjectiveC.NSObject {
  public static func authenticateClient(_ request: GoSignSDK.ClientAuthenticateAPIRequest, completion: @escaping (Swift.Result<GoSignSDK.AuthenticateClientAPIResponse, any Swift.Error>) -> Swift.Void)
  public static func authenticateUser(_ userID: Swift.String, completion: @escaping (Swift.Result<GoSignSDK.AuthenticateUserAPIResponse, any Swift.Error>) -> Swift.Void)
  public static func verifyOTP(_ request: GoSignSDK.VerifyOTPAPIRequest, completion: @escaping (Swift.Result<GoSignSDK.TokenInfo, any Swift.Error>) -> Swift.Void)
  public static func renewAccessToken(_ refreshToken: Swift.String? = nil, completion: @escaping (Swift.Result<GoSignSDK.TokenInfo, any Swift.Error>) -> Swift.Void)
  public static func registerDevice(localizedReason: Swift.String = "Unlock to add device", completion: @escaping (Swift.Result<GoSignSDK.RegisterDeviceAPIResponse, any Swift.Error>) -> Swift.Void)
  public static func listRegisteredDevices(_ userID: Swift.String? = nil, completion: @escaping (Swift.Result<[GoSignSDK.DeviceInfo], any Swift.Error>) -> Swift.Void)
  public static func deleteDevice(_ deviceID: Swift.String? = nil, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  public static func getPendingAuthorisationRequest(_ completion: @escaping (Swift.Result<GoSignSDK.PendingAuthorisationAPIResponse, any Swift.Error>) -> Swift.Void)
  public static func authoriseaPendingRequest(localizedReason: Swift.String = "Unlock to add device", pendingAuthorisationAPIResponse: GoSignSDK.PendingAuthorisationAPIResponse, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  public static func cancelPendingRequest(_ pendingAuthorisationAPIResponse: GoSignSDK.PendingAuthorisationAPIResponse, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  public static func getUserProfile(_ completion: @escaping (Swift.Result<GoSignSDK.UserProfileAPIResponse, any Swift.Error>) -> Swift.Void)
  public static func getDeviceRegistrationSettings(_ completion: @escaping (Swift.Result<GoSignSDK.DeviceRegistrationSettings, any Swift.Error>) -> Swift.Void)
  public static func generateQRCode(_ request: GoSignSDK.GenerateQRCodeAPIRequest, completion: @escaping (Swift.Result<GoSignSDK.GenerateQRCodeAPIResponse, any Swift.Error>) -> Swift.Void)
  public static func verifyQRCode(_ request: GoSignSDK.VerifyQRCodeAPIRequest, completion: @escaping (Swift.Result<GoSignSDK.TokenInfo, any Swift.Error>) -> Swift.Void)
  public static func registerDeviceForPushNotification(_ request: GoSignSDK.DevicePushNotificationAPIRequest, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  public static func deleteDeviceForPushNotification(_ request: GoSignSDK.DeleteDeviceForNotificationAPIRequest, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc extension GoSignSDK.API {
  @available(swift, obsoleted: 1.0)
  @objc(authenticateClient:completion:) public static func objcAuthenticateClient(_ request: GoSignSDK.ClientAuthenticateAPIRequest, completion: @escaping (GoSignSDK.AuthenticateClientAPIResponse?, Foundation.NSError?) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc(authenticateUser:completion:) public static func objcAuthenticateUser(_ userID: Swift.String, completion: @escaping (GoSignSDK.AuthenticateUserAPIResponse?, Foundation.NSError?) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc(verifyOTP:completion:) public static func objcVerifyOTP(_ request: GoSignSDK.VerifyOTPAPIRequest, completion: @escaping (GoSignSDK.TokenInfo?, Foundation.NSError?) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc(renewAccessToken:) public static func objcRenewAccessToken(completion: @escaping (GoSignSDK.TokenInfo?, Foundation.NSError?) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc(registerDeviceWithLocalizedReason:completion:) public static func objcRegisterDevice(localizedReason: Swift.String = "Unlock to add device", completion: @escaping (GoSignSDK.RegisterDeviceAPIResponse?, Foundation.NSError?) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc(listRegisteredDevices:) public static func objcListRegisteredDevices(completion: @escaping ([GoSignSDK.DeviceInfo]?, Foundation.NSError?) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc(deleteDevice:completion:) public static func objcDeleteDevice(_ deviceID: Swift.String? = nil, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc(getPendingAuthorisationRequest:) public static func objcGetPendingAuthorisationRequest(completion: @escaping (GoSignSDK.PendingAuthorisationAPIResponse?, Foundation.NSError?) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc(authoriseaPendingRequestWithLocalizedReason:pendingAuthorisationAPIResponse:completion:) public static func objcAuthoriseaPendingRequest(localizedReason: Swift.String = "Unlock to auth device", pendingAuthorisationAPIResponse: GoSignSDK.PendingAuthorisationAPIResponse, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc(cancelPendingRequest:completion:) public static func objcCancelPendingRequest(_ pendingAuthorisationAPIResponse: GoSignSDK.PendingAuthorisationAPIResponse, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc(getUserProfile:) public static func objcGetUserProfile(completion: @escaping (GoSignSDK.UserProfileAPIResponse?, Foundation.NSError?) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc(getDeviceRegistrationSettings:) public static func objcGetDeviceRegistrationSettings(completion: @escaping (GoSignSDK.DeviceRegistrationSettings?, Foundation.NSError?) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc(generateQRCode:completion:) public static func objcGenerateQRCode(_ request: GoSignSDK.GenerateQRCodeAPIRequest, completion: @escaping (GoSignSDK.GenerateQRCodeAPIResponse?, Foundation.NSError?) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc(verifyQRCode:completion:) public static func objcVerifyQRCode(_ request: GoSignSDK.VerifyQRCodeAPIRequest, completion: @escaping (GoSignSDK.TokenInfo?, Foundation.NSError?) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc(registerDeviceForPushNotification:completion:) public static func objcRegisterDeviceForPushNotification(_ request: GoSignSDK.DevicePushNotificationAPIRequest, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc(deleteDeviceForPushNotification:completion:) public static func objcDeleteDeviceForPushNotification(_ request: GoSignSDK.DeleteDeviceForNotificationAPIRequest, completion: @escaping (Foundation.NSError?) -> Swift.Void)
}
@objc public class AuthenticateClientAPIResponse : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let accessToken: Swift.String
  @objc final public let expiresIn: Swift.Double
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class AuthenticateUserAPIResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let authType: Swift.String?
  @objc final public let tokenInfo: GoSignSDK.TokenInfo?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class TokenInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let accessToken: Swift.String?, refreshToken: Swift.String?, tokenType: Swift.String?
  @objc final public let expiresIn: Swift.Int
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class RegisterDeviceAPIResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let alias: Swift.String?, certificate: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class VerifyOTPAPIRequest : ObjectiveC.NSObject, Swift.Encodable {
  @objc public var userID: Swift.String
  @objc public var otpInfo: [GoSignSDK.OtpInfo]
  @objc public init(userID: Swift.String? = nil, otpInfo: [GoSignSDK.OtpInfo])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public class OtpInfo : ObjectiveC.NSObject, Swift.Encodable {
  @objc final public let otp: Swift.String
  @objc final public let otpType: GoSignSDK.OTPType
  @objc public init(otp: Swift.String, otpType: GoSignSDK.OTPType)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public enum OTPType : Swift.Int, Swift.Encodable, Swift.RawRepresentable {
  case sms
  case mail
  public typealias RawValue = Swift.String
  public var rawValue: GoSignSDK.OTPType.RawValue {
    get
  }
  public init?(rawValue: GoSignSDK.OTPType.RawValue)
}
@objc public class UserProfileAPIResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let userID: Swift.String?, userName: Swift.String?, appName: Swift.String?
  @objc final public let userEmail: Swift.String?, userMobile: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class PendingAuthorisationAPIResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var transactionID: Swift.String
  @objc public var request: Swift.String
  @objc public var hashAlgorithm: Swift.String
  @objc public init(transactionID: Swift.String? = nil, request: Swift.String? = nil, hashAlgorithm: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public let ANAUTHORIZED_CODE: Swift.String
@objc @_inheritsConvenienceInitializers final public class CloudCA : ObjectiveC.NSObject {
  public static func setData(clientId: Swift.String, clientSecret: Swift.String, grantType: Swift.String, userId: Swift.String)
  public static func initData(clientId: Swift.String, clientSecret: Swift.String, grantType: Swift.String, userId: Swift.String)
  public static func authenticateClient(_ completion: @escaping (Swift.Result<GoSignSDK.AuthenticateClientAPIResponse, any Swift.Error>) -> Swift.Void)
  public static func authenticateUser(_ completion: @escaping (Swift.Result<GoSignSDK.AuthenticateUserAPIResponse, any Swift.Error>) -> Swift.Void)
  public static func verifyOTP(_ request: GoSignSDK.VerifyOTPAPIRequest, completion: @escaping (Swift.Result<GoSignSDK.TokenInfo, any Swift.Error>) -> Swift.Void)
  public static func renewAccessToken(_ refreshToken: Swift.String? = nil, completion: @escaping (Swift.Result<GoSignSDK.TokenInfo, any Swift.Error>) -> Swift.Void)
  public static func registerDevice(localizedReason: Swift.String = "Unlock to add device", completion: @escaping (Swift.Result<GoSignSDK.RegisterDeviceAPIResponse, any Swift.Error>) -> Swift.Void)
  public static func listRegisteredDevices(_ userID: Swift.String? = nil, completion: @escaping (Swift.Result<[GoSignSDK.DeviceInfo], any Swift.Error>) -> Swift.Void)
  public static func deleteDevice(_ deviceID: Swift.String? = nil, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  public static func getPendingAuthorisationRequest(_ completion: @escaping (Swift.Result<GoSignSDK.PendingAuthorisationAPIResponse, any Swift.Error>) -> Swift.Void)
  public static func authoriseaPendingRequest(localizedReason: Swift.String = "Unlock to add device", pendingAuthorisationAPIResponse: GoSignSDK.PendingAuthorisationAPIResponse, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  public static func cancelPendingRequest(_ pendingAuthorisationAPIResponse: GoSignSDK.PendingAuthorisationAPIResponse, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  public static func getUserProfile(_ completion: @escaping (Swift.Result<GoSignSDK.UserProfileAPIResponse, any Swift.Error>) -> Swift.Void)
  public static func getDeviceRegistrationSettings(_ completion: @escaping (Swift.Result<GoSignSDK.DeviceRegistrationSettings, any Swift.Error>) -> Swift.Void)
  public static func generateQRCode(_ request: GoSignSDK.GenerateQRCodeAPIRequest, completion: @escaping (Swift.Result<GoSignSDK.GenerateQRCodeAPIResponse, any Swift.Error>) -> Swift.Void)
  public static func verifyQRCode(_ request: GoSignSDK.VerifyQRCodeAPIRequest, completion: @escaping (Swift.Result<GoSignSDK.TokenInfo, any Swift.Error>) -> Swift.Void)
  public static func registerDeviceForPushNotification(_ request: GoSignSDK.DevicePushNotificationAPIRequest, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  public static func deleteDeviceForPushNotification(_ request: GoSignSDK.DeleteDeviceForNotificationAPIRequest, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class AuthoriseaPendingAPIRequest : ObjectiveC.NSObject, Swift.Encodable {
  @objc public var request: Swift.String?
  @objc public var hashAlgorithm: Swift.String?
  @objc public init(request: Swift.String?, hashAlgorithm: Swift.String?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public class ClientAuthenticateAPIRequest : ObjectiveC.NSObject, Swift.Encodable {
  @objc public init(clientId: Swift.String, clientSecret: Swift.String, grantType: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public class DeviceRegistrationAPIRequest : ObjectiveC.NSObject, Swift.Encodable {
  @objc public var csr: Swift.String?
  @objc public var device: GoSignSDK.DeviceInfo?
  @objc public init(csr: Swift.String?, device: GoSignSDK.DeviceInfo?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public class DeviceInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc public var deviceID: Swift.String
  @objc public var deviceName: Swift.String
  @objc public var secureElement: Swift.Bool
  @objc public var biometric: Swift.Bool
  @objc public init(deviceID: Swift.String = UserDefaults.standard.deviceID, deviceName: Swift.String = UIDevice.current.model, secureElement: Swift.Bool = Device.hasSecureEnclave, biometric: Swift.Bool = Device.hasBiometrics)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc extension Foundation.UserDefaults {
  @objc dynamic public var deviceID: Swift.String {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc public class Device : ObjectiveC.NSObject {
  @objc public static var hasSecureEnclave: Swift.Bool {
    @objc get
  }
  @objc public static var isSimulator: Swift.Bool {
    @objc get
  }
  @objc public static var hasBiometrics: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension GoSignSDK.QRFormat : Swift.Equatable {}
extension GoSignSDK.QRFormat : Swift.Hashable {}
extension GoSignSDK.KeyAlgorithm.Signature : Swift.Equatable {}
extension GoSignSDK.KeyAlgorithm.Signature : Swift.Hashable {}
extension GoSignSDK.OTPType : Swift.Equatable {}
extension GoSignSDK.OTPType : Swift.Hashable {}

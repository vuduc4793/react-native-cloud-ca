// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name GoSignSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import Foundation
@_exported import GoSignSDK
import KeychainSwift
import LocalAuthentication
import Moya
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
extension Swift.Result where Success == () {
  public static var success: Swift.Result<(), Failure> {
    get
  }
}
public struct ServerResponseError : Swift.Error, Swift.Codable {
  public let error: Swift.String?
  public let errorDescription: Swift.String?
  public let code: Swift.String?
  public let codeDesc: Swift.String?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case error
    case errorDescription
    case code
    case codeDesc
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class Router {
  public static func request<T, U>(targetType: T, completion: @escaping (Swift.Result<U, any Swift.Error>) -> Swift.Void) where T : Moya.TargetType, U : Swift.Decodable
  public static func request<T>(targetType: T, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void) where T : Moya.TargetType
  @objc deinit
}
public struct VerifyQRCodeAPIRequest : Swift.Encodable {
  public let userID: Swift.String, qrCode: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case userID
    case qrCode
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(userID: Swift.String? = nil, qrCode: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct DeleteDeviceForNotificationAPIRequest : Swift.Codable {
  public let deviceToken: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case deviceToken
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(deviceToken: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserAuthenticateAPIRequest : Swift.Encodable {
  public let userID: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case userID
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct DeviceRegistrationSettings : Swift.Codable {
  public let deviceKeyType: Swift.String?
  public let deviceKeySize: Swift.Int?
  public let secureElementRequired: Swift.Bool?, biometricRequired: Swift.Bool?
  public let allowedDevices: Swift.String?, clockToleranceOnAuthCERT: Swift.String?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case deviceKeyType
    case deviceKeySize
    case secureElementRequired
    case biometricRequired
    case allowedDevices
    case clockToleranceOnAuthCERT
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DevicePushNotificationAPIRequest : Swift.Encodable {
  public let deviceToken: Swift.String
  public let osType: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case deviceToken
    case osType
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(deviceToken: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct GenerateQRCodeAPIRequest : Swift.Encodable {
  public let clientID: Swift.String
  public let userID: Swift.String
  public let format: GoSignSDK.QRFormat
  public let size: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case format, size
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(clientID: Swift.String, userID: Swift.String? = nil, format: GoSignSDK.QRFormat = .png, size: Swift.String = "256")
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct GenerateQRCodeAPIResponse : Swift.Codable {
  public let size: Swift.String?, qrCode: Swift.String?
  public let format: GoSignSDK.QRFormat?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum QRFormat : Swift.String, Swift.Codable {
  case png, jpg, bmp, jpeg, wbmp, gif
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SubjectItem {
  case commonName(Swift.String), organizationName(Swift.String), organizationUnitName(Swift.String), countryName(Swift.String), stateOrProvinceName(Swift.String), serialNumber(Swift.String), localityName(Swift.String), description(Swift.String), emailAddress(Swift.String)
}
@objc @_inheritsConvenienceInitializers public class CertificateSigningRequest : ObjectiveC.NSObject {
  public init(keyAlgorithm: GoSignSDK.KeyAlgorithm)
  @objc convenience override dynamic public init()
  convenience public init(commonName: Swift.String? = nil, organizationName: Swift.String? = nil, organizationUnitName: Swift.String? = nil, countryName: Swift.String? = nil, stateOrProvinceName: Swift.String? = nil, localityName: Swift.String? = nil, serialNumber: Swift.String? = nil, emailAddress: Swift.String? = nil, description: Swift.String? = nil, keyAlgorithm: GoSignSDK.KeyAlgorithm)
  public func addSubjectItem(_ subjectItem: GoSignSDK.SubjectItem)
  public func build(_ publicKeyBits: Foundation.Data, privateKey: Security.SecKey, publicKey: Security.SecKey? = nil) -> Foundation.Data?
  public func buildAndEncodeDataAsString(_ publicKeyBits: Foundation.Data, privateKey: Security.SecKey, publicKey: Security.SecKey? = nil) -> Swift.String?
  public func buildCSRAndReturnString(_ publicKeyBits: Foundation.Data, privateKey: Security.SecKey, publicKey: Security.SecKey? = nil) -> Swift.String?
  @objc deinit
}
public enum KeyAlgorithm {
  case rsa(signatureType: GoSignSDK.KeyAlgorithm.Signature), ec(signatureType: GoSignSDK.KeyAlgorithm.Signature)
  @available(iOS 10, macCatalyst 13.0, macOS 10.12, tvOS 10.0, watchOS 3.0, *)
  public var secKeyAttrType: CoreFoundation.CFString {
    get
  }
  public var availableKeySizes: [Swift.Int] {
    get
  }
  public enum Signature {
    case sha1, sha256, sha512
    public static func == (a: GoSignSDK.KeyAlgorithm.Signature, b: GoSignSDK.KeyAlgorithm.Signature) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var type: Swift.String {
    get
  }
  @available(iOS 10, macCatalyst 13.0, macOS 10.12, tvOS 10.0, watchOS 3.0, *)
  public var signatureAlgorithm: Security.SecKeyAlgorithm {
    get
  }
}
extension GoSignSDK.API {
  @objc public static var accessToken: Swift.String {
    @objc get
  }
  @objc public static var userToken: Swift.String {
    @objc get
  }
  @objc public static var refreshToken: Swift.String {
    @objc get
  }
}
extension GoSignSDK.API {
  @objc public static var host: Swift.String
}
@objc @_inheritsConvenienceInitializers final public class API : ObjectiveC.NSObject {
  public static func authenticateClient(_ request: GoSignSDK.ClientAuthenticateAPIRequest, completion: @escaping (Swift.Result<GoSignSDK.AuthenticateClientAPIResponse, any Swift.Error>) -> Swift.Void)
  public static func authenticateUser(_ userID: Swift.String, completion: @escaping (Swift.Result<GoSignSDK.AuthenticateUserAPIResponse, any Swift.Error>) -> Swift.Void)
  public static func verifyOTP(_ request: GoSignSDK.VerifyOTPAPIRequest, completion: @escaping (Swift.Result<GoSignSDK.TokenInfo, any Swift.Error>) -> Swift.Void)
  public static func renewAccessToken(_ refreshToken: Swift.String? = nil, completion: @escaping (Swift.Result<GoSignSDK.TokenInfo, any Swift.Error>) -> Swift.Void)
  public static func registerDevice(localizedReason: Swift.String = "Unlock to add device", completion: @escaping (Swift.Result<GoSignSDK.RegisterDeviceAPIResponse, any Swift.Error>) -> Swift.Void)
  public static func listRegisteredDevices(_ userID: Swift.String? = nil, completion: @escaping (Swift.Result<[GoSignSDK.DeviceInfo], any Swift.Error>) -> Swift.Void)
  public static func deleteDevice(_ deviceID: Swift.String? = nil, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  public static func getPendingAuthorisationRequest(_ completion: @escaping (Swift.Result<GoSignSDK.PendingAuthorisationAPIResponse, any Swift.Error>) -> Swift.Void)
  public static func authoriseaPendingRequest(localizedReason: Swift.String = "Unlock to add device", pendingAuthorisationAPIResponse: GoSignSDK.PendingAuthorisationAPIResponse, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  public static func cancelPendingRequest(_ pendingAuthorisationAPIResponse: GoSignSDK.PendingAuthorisationAPIResponse, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  public static func getUserProfile(_ completion: @escaping (Swift.Result<GoSignSDK.UserProfileAPIResponse, any Swift.Error>) -> Swift.Void)
  public static func getDeviceRegistrationSettings(_ completion: @escaping (Swift.Result<GoSignSDK.DeviceRegistrationSettings, any Swift.Error>) -> Swift.Void)
  public static func generateQRCode(_ request: GoSignSDK.GenerateQRCodeAPIRequest, completion: @escaping (Swift.Result<GoSignSDK.GenerateQRCodeAPIResponse, any Swift.Error>) -> Swift.Void)
  public static func verifyQRCode(_ request: GoSignSDK.VerifyQRCodeAPIRequest, completion: @escaping (Swift.Result<GoSignSDK.TokenInfo, any Swift.Error>) -> Swift.Void)
  public static func registerDeviceForPushNotification(_ request: GoSignSDK.DevicePushNotificationAPIRequest, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  public static func deleteDeviceForPushNotification(_ request: GoSignSDK.DeleteDeviceForNotificationAPIRequest, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
public struct AuthenticateClientAPIResponse : Swift.Decodable {
  public let accessToken: Swift.String
  public let expiresIn: Swift.Double
  public init(from decoder: any Swift.Decoder) throws
}
public struct AuthenticateUserAPIResponse : Swift.Codable {
  public let authType: Swift.String?
  public let tokenInfo: GoSignSDK.TokenInfo?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TokenInfo : Swift.Codable {
  public let accessToken: Swift.String?, refreshToken: Swift.String?, tokenType: Swift.String?
  public let expiresIn: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public class RegisterDeviceAPIResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let alias: Swift.String?, certificate: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyOTPAPIRequest : Swift.Encodable {
  public let userID: Swift.String
  public let otpInfo: [GoSignSDK.OtpInfo]
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case userID
    case otpInfo
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(userID: Swift.String? = nil, otpInfo: [GoSignSDK.OtpInfo])
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct OtpInfo : Swift.Encodable {
  public let otp: Swift.String
  public let otpType: GoSignSDK.OTPType
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case otp
    case otpType
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(otp: Swift.String, otpType: GoSignSDK.OTPType)
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum OTPType : Swift.String, Swift.Encodable {
  case sms
  case mail
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UserProfileAPIResponse : Swift.Codable {
  public let userID: Swift.String?, userName: Swift.String?, appName: Swift.String?
  public let userEmail: Swift.String?, userMobile: Swift.String?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case userID
    case userName
    case appName
    case userEmail
    case userMobile
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public class PendingAuthorisationAPIResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let transactionID: Swift.String, request: Swift.String, hashAlgorithm: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case transactionID
    case request
    case hashAlgorithm
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  @objc public init(transactionID: Swift.String, request: Swift.String, hashAlgorithm: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct AuthoriseaPendingAPIRequest : Swift.Encodable {
  public let request: Swift.String
  public let hashAlgorithm: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case request
    case hashAlgorithm
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public class ClientAuthenticateAPIRequest : ObjectiveC.NSObject, Swift.Encodable {
  @objc public init(clientId: Swift.String, clientSecret: Swift.String, grantType: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case clientId
    case clientSecret
    case grantType
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct DeviceRegistrationAPIRequest : Swift.Encodable {
  public let csr: Swift.String?
  public let device: GoSignSDK.DeviceInfo
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct DeviceInfo : Swift.Codable {
  public let deviceID: Swift.String
  public let deviceName: Swift.String
  public let secureElement: Swift.Bool
  public let biometric: Swift.Bool
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case deviceID
    case deviceName
    case secureElement
    case biometric
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc extension Foundation.UserDefaults {
  @objc dynamic public var deviceID: Swift.String {
    @objc get
  }
}
extension GoSignSDK.ServerResponseError.CodingKeys : Swift.Equatable {}
extension GoSignSDK.ServerResponseError.CodingKeys : Swift.Hashable {}
extension GoSignSDK.ServerResponseError.CodingKeys : Swift.RawRepresentable {}
extension GoSignSDK.VerifyQRCodeAPIRequest.CodingKeys : Swift.Equatable {}
extension GoSignSDK.VerifyQRCodeAPIRequest.CodingKeys : Swift.Hashable {}
extension GoSignSDK.VerifyQRCodeAPIRequest.CodingKeys : Swift.RawRepresentable {}
extension GoSignSDK.DeleteDeviceForNotificationAPIRequest.CodingKeys : Swift.Equatable {}
extension GoSignSDK.DeleteDeviceForNotificationAPIRequest.CodingKeys : Swift.Hashable {}
extension GoSignSDK.DeleteDeviceForNotificationAPIRequest.CodingKeys : Swift.RawRepresentable {}
extension GoSignSDK.UserAuthenticateAPIRequest.CodingKeys : Swift.Equatable {}
extension GoSignSDK.UserAuthenticateAPIRequest.CodingKeys : Swift.Hashable {}
extension GoSignSDK.UserAuthenticateAPIRequest.CodingKeys : Swift.RawRepresentable {}
extension GoSignSDK.DeviceRegistrationSettings.CodingKeys : Swift.Equatable {}
extension GoSignSDK.DeviceRegistrationSettings.CodingKeys : Swift.Hashable {}
extension GoSignSDK.DeviceRegistrationSettings.CodingKeys : Swift.RawRepresentable {}
extension GoSignSDK.DevicePushNotificationAPIRequest.CodingKeys : Swift.Equatable {}
extension GoSignSDK.DevicePushNotificationAPIRequest.CodingKeys : Swift.Hashable {}
extension GoSignSDK.DevicePushNotificationAPIRequest.CodingKeys : Swift.RawRepresentable {}
extension GoSignSDK.GenerateQRCodeAPIRequest.CodingKeys : Swift.Equatable {}
extension GoSignSDK.GenerateQRCodeAPIRequest.CodingKeys : Swift.Hashable {}
extension GoSignSDK.GenerateQRCodeAPIRequest.CodingKeys : Swift.RawRepresentable {}
extension GoSignSDK.QRFormat : Swift.Equatable {}
extension GoSignSDK.QRFormat : Swift.Hashable {}
extension GoSignSDK.QRFormat : Swift.RawRepresentable {}
extension GoSignSDK.KeyAlgorithm.Signature : Swift.Equatable {}
extension GoSignSDK.KeyAlgorithm.Signature : Swift.Hashable {}
extension GoSignSDK.VerifyOTPAPIRequest.CodingKeys : Swift.Equatable {}
extension GoSignSDK.VerifyOTPAPIRequest.CodingKeys : Swift.Hashable {}
extension GoSignSDK.VerifyOTPAPIRequest.CodingKeys : Swift.RawRepresentable {}
extension GoSignSDK.OtpInfo.CodingKeys : Swift.Equatable {}
extension GoSignSDK.OtpInfo.CodingKeys : Swift.Hashable {}
extension GoSignSDK.OtpInfo.CodingKeys : Swift.RawRepresentable {}
extension GoSignSDK.OTPType : Swift.Equatable {}
extension GoSignSDK.OTPType : Swift.Hashable {}
extension GoSignSDK.OTPType : Swift.RawRepresentable {}
extension GoSignSDK.UserProfileAPIResponse.CodingKeys : Swift.Equatable {}
extension GoSignSDK.UserProfileAPIResponse.CodingKeys : Swift.Hashable {}
extension GoSignSDK.UserProfileAPIResponse.CodingKeys : Swift.RawRepresentable {}
extension GoSignSDK.PendingAuthorisationAPIResponse.CodingKeys : Swift.Equatable {}
extension GoSignSDK.PendingAuthorisationAPIResponse.CodingKeys : Swift.Hashable {}
extension GoSignSDK.PendingAuthorisationAPIResponse.CodingKeys : Swift.RawRepresentable {}
extension GoSignSDK.AuthoriseaPendingAPIRequest.CodingKeys : Swift.Equatable {}
extension GoSignSDK.AuthoriseaPendingAPIRequest.CodingKeys : Swift.Hashable {}
extension GoSignSDK.AuthoriseaPendingAPIRequest.CodingKeys : Swift.RawRepresentable {}
extension GoSignSDK.ClientAuthenticateAPIRequest.CodingKeys : Swift.Equatable {}
extension GoSignSDK.ClientAuthenticateAPIRequest.CodingKeys : Swift.Hashable {}
extension GoSignSDK.ClientAuthenticateAPIRequest.CodingKeys : Swift.RawRepresentable {}
extension GoSignSDK.DeviceInfo.CodingKeys : Swift.Equatable {}
extension GoSignSDK.DeviceInfo.CodingKeys : Swift.Hashable {}
extension GoSignSDK.DeviceInfo.CodingKeys : Swift.RawRepresentable {}

// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name GoSignSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import Foundation
@_exported import GoSignSDK
import KeychainSwift
import LocalAuthentication
import Moya
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
extension Swift.Result where Success == () {
  public static var success: Swift.Result<(), Failure> {
    get
  }
}
public struct ServerResponseError : Swift.Error, Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class Router {
  public static func request<T, U>(targetType: T, completion: @escaping (Swift.Result<U, Swift.Error>) -> Swift.Void) where T : Moya.TargetType, U : Swift.Decodable
  public static func request<T>(targetType: T, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void) where T : Moya.TargetType
  @objc deinit
}
public struct VerifyQRCodeAPIRequest : Swift.Encodable {
  public let userID: Swift.String, qrCode: Swift.String
  public init(userID: Swift.String, qrCode: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct DeleteDeviceForNotificationAPIRequest : Swift.Codable {
  public let deviceToken: Swift.String
  public init(deviceToken: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DeviceRegistrationSettings : Swift.Codable {
  public let deviceKeyType: Swift.String?
  public let deviceKeySize: Swift.Int?
  public let secureElementRequired: Swift.Bool?, biometricRequired: Swift.Bool?
  public let allowedDevices: Swift.String?, clockToleranceOnAuthCERT: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DevicePushNotificationAPIRequest : Swift.Encodable {
  public let deviceToken: Swift.String
  public let osType: Swift.String
  public init(deviceToken: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct GenerateQRCodeAPIRequest : Swift.Encodable {
  public let clientID: Swift.String
  public let userID: Swift.String
  public let format: GoSignSDK.QRFormat
  public let size: Swift.String
  public init(clientID: Swift.String, userID: Swift.String, format: GoSignSDK.QRFormat = .png, size: Swift.String = "256")
  public func encode(to encoder: Swift.Encoder) throws
}
public struct GenerateQRCodeAPIResponse : Swift.Codable {
  public let size: Swift.String?, qrCode: Swift.String?
  public let format: GoSignSDK.QRFormat?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum QRFormat : Swift.String, Swift.Codable {
  case png, jpg, bmp, jpeg, wbmp, gif
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SubjectItem {
  case commonName(Swift.String), organizationName(Swift.String), organizationUnitName(Swift.String), countryName(Swift.String), stateOrProvinceName(Swift.String), serialNumber(Swift.String), localityName(Swift.String), description(Swift.String), emailAddress(Swift.String)
}
@objc @_inheritsConvenienceInitializers public class CertificateSigningRequest : ObjectiveC.NSObject {
  public init(keyAlgorithm: GoSignSDK.KeyAlgorithm)
  @objc convenience override dynamic public init()
  convenience public init(commonName: Swift.String? = nil, organizationName: Swift.String? = nil, organizationUnitName: Swift.String? = nil, countryName: Swift.String? = nil, stateOrProvinceName: Swift.String? = nil, localityName: Swift.String? = nil, serialNumber: Swift.String? = nil, emailAddress: Swift.String? = nil, description: Swift.String? = nil, keyAlgorithm: GoSignSDK.KeyAlgorithm)
  public func addSubjectItem(_ subjectItem: GoSignSDK.SubjectItem)
  public func build(_ publicKeyBits: Foundation.Data, privateKey: Security.SecKey, publicKey: Security.SecKey? = nil) -> Foundation.Data?
  public func buildAndEncodeDataAsString(_ publicKeyBits: Foundation.Data, privateKey: Security.SecKey, publicKey: Security.SecKey? = nil) -> Swift.String?
  public func buildCSRAndReturnString(_ publicKeyBits: Foundation.Data, privateKey: Security.SecKey, publicKey: Security.SecKey? = nil) -> Swift.String?
  @objc deinit
}
public enum KeyAlgorithm {
  case rsa(signatureType: GoSignSDK.KeyAlgorithm.Signature), ec(signatureType: GoSignSDK.KeyAlgorithm.Signature)
  @available(iOS 10, macCatalyst 13.0, macOS 10.12, tvOS 10.0, watchOS 3.0, *)
  public var secKeyAttrType: CoreFoundation.CFString {
    get
  }
  public var availableKeySizes: [Swift.Int] {
    get
  }
  public enum Signature {
    case sha1, sha256, sha512
    public static func == (a: GoSignSDK.KeyAlgorithm.Signature, b: GoSignSDK.KeyAlgorithm.Signature) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var type: Swift.String {
    get
  }
  @available(iOS 10, macCatalyst 13.0, macOS 10.12, tvOS 10.0, watchOS 3.0, *)
  public var signatureAlgorithm: Security.SecKeyAlgorithm {
    get
  }
}
public enum API {
  public static func authenticateClient(_ request: GoSignSDK.ClientAuthenticateAPIReqest, completion: @escaping (Swift.Result<GoSignSDK.AuthenticateClientAPIResponse, Swift.Error>) -> Swift.Void)
  public static func authenticateUser(_ userID: Swift.String, completion: @escaping (Swift.Result<GoSignSDK.AuthenticateUserAPIResponse, Swift.Error>) -> Swift.Void)
  public static func verifyOTP(_ request: GoSignSDK.VerifyOTPAPIRequest, completion: @escaping (Swift.Result<GoSignSDK.TokenInfo, Swift.Error>) -> Swift.Void)
  public static func renewAccessToken(_ refreshToken: Swift.String? = nil, completion: @escaping (Swift.Result<GoSignSDK.TokenInfo, Swift.Error>) -> Swift.Void)
  public static func registerDevice(_ completion: @escaping (Swift.Result<GoSignSDK.RegisterDeviceAPIResponse, Swift.Error>) -> Swift.Void)
  public static func listRegisteredDevices(_ userID: Swift.String? = nil, completion: @escaping (Swift.Result<[GoSignSDK.DeviceInfo], Swift.Error>) -> Swift.Void)
  public static func deleteDevice(_ deviceID: Swift.String, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public static func getPendingAuthorisationRequest(_ completion: @escaping (Swift.Result<GoSignSDK.PendingAuthorisationAPIResponse, Swift.Error>) -> Swift.Void)
  public static func authoriseaPendingRequest(_ pendingAuthorisationAPIResponse: GoSignSDK.PendingAuthorisationAPIResponse, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public static func cancelPendingRequest(_ pendingAuthorisationAPIResponse: GoSignSDK.PendingAuthorisationAPIResponse, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public static func getUserProfile(_ completion: @escaping (Swift.Result<GoSignSDK.UserProfileAPIResponse, Swift.Error>) -> Swift.Void)
  public static func getDeviceRegistrationSettings(_ completion: @escaping (Swift.Result<GoSignSDK.DeviceRegistrationSettings, Swift.Error>) -> Swift.Void)
  public static func generateQRCode(_ request: GoSignSDK.GenerateQRCodeAPIRequest, completion: @escaping (Swift.Result<GoSignSDK.GenerateQRCodeAPIResponse, Swift.Error>) -> Swift.Void)
  public static func verifyQRCode(_ request: GoSignSDK.VerifyQRCodeAPIRequest, completion: @escaping (Swift.Result<GoSignSDK.TokenInfo, Swift.Error>) -> Swift.Void)
  public static func registerDeviceForPushNotification(_ request: GoSignSDK.DevicePushNotificationAPIRequest, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public static func deleteDeviceForPushNotification(_ request: GoSignSDK.DeleteDeviceForNotificationAPIRequest, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
}
public struct AuthenticateClientAPIResponse : Swift.Decodable {
  public let accessToken: Swift.String
  public let expiresIn: Swift.Double
  public init(from decoder: Swift.Decoder) throws
}
public struct AuthenticateUserAPIResponse : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TokenInfo : Swift.Codable {
  public let accessToken: Swift.String?, refreshToken: Swift.String?, tokenType: Swift.String?
  public let expiresIn: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RegisterDeviceAPIResponse : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct VerifyOTPAPIRequest : Swift.Encodable {
  public let userID: Swift.String
  public let otpInfo: [GoSignSDK.OtpInfo]
  public init(userID: Swift.String? = nil, otpInfo: [GoSignSDK.OtpInfo])
  public func encode(to encoder: Swift.Encoder) throws
}
public struct OtpInfo : Swift.Encodable {
  public let otp: Swift.String
  public let otpType: GoSignSDK.OTPType
  public init(otp: Swift.String, otpType: GoSignSDK.OTPType)
  public func encode(to encoder: Swift.Encoder) throws
}
public enum OTPType : Swift.String, Swift.Encodable {
  case sms
  case mail
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UserProfileAPIResponse : Swift.Codable {
  public let userID: Swift.String?, userName: Swift.String?, appName: Swift.String?
  public let userEmail: Swift.String?, userMobile: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PendingAuthorisationAPIResponse : Swift.Codable {
  public let transactionID: Swift.String, request: Swift.String, hashAlgorithm: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ClientAuthenticateAPIReqest : Swift.Encodable {
  public init(clientId: Swift.String, clientSecret: Swift.String, grantType: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct DeviceInfo : Swift.Codable {
  public let deviceID: Swift.String
  public let deviceName: Swift.String
  public let secureElement: Swift.Bool
  public let biometric: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension GoSignSDK.QRFormat : Swift.Equatable {}
extension GoSignSDK.QRFormat : Swift.Hashable {}
extension GoSignSDK.QRFormat : Swift.RawRepresentable {}
extension GoSignSDK.KeyAlgorithm.Signature : Swift.Equatable {}
extension GoSignSDK.KeyAlgorithm.Signature : Swift.Hashable {}
extension GoSignSDK.OTPType : Swift.Equatable {}
extension GoSignSDK.OTPType : Swift.Hashable {}
extension GoSignSDK.OTPType : Swift.RawRepresentable {}
